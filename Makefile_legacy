.SUFFIXES: .cpp .o

# dependencies: sudo apt-get install mingw-w64 gfortran-mingw-w64 -y
# may use wine to work on linux: sudo apt-get install wine

.SUFFIXES: .cpp .o

ARCH = $(shell uname -m)
#ARCH = aarch64
PLAT = $(shell uname -s | tr '[:upper:]' '[:lower:]')-gnu
# PLAT = w64-mingw32
#EXTRA = 
EXTRA = -lpsapi -liphlpapi -lpord -lmetis 

ifdef OS
   CC=g++
   RES=windres
   RM = del /F /S /Q
   FixPath = $(subst /,\,$1)
else
   ifeq ($(shell uname), Linux)
      CC=x86_64-w64-mingw32-g++
      RES=x86_64-w64-mingw32-windres
      RM = rm -f
      FixPath = $1
   endif
endif

BIN = fes

CC = x86_64-w64-mingw32-g++
RES=x86_64-w64-mingw32-windres
INCDIR = -I./ext/tetgen -I./ext/mumps/include -I./ext/arma/include -I./ext/metis -I./ext/gmm -DTETLIBRARY #-I./dep/include
LIBDIR = -L./ext #-L./dep/lib/$(ARCH)-$(PLAT)/

BINDIR  = ./bin/x86_64-w64-mingw32-legacy
OBJDIR  = ./obj/x86_64-w64-mingw32-legacy
SRCDIR  = ./src_legacy
TEST    = ./test

CFLAGS = $(INCDIR) -std=c++98 -m64 -O3 -fopenmp -static
LFLAGS = $(LIBDIR) -std=c++98 -m64 -fopenmp -static -s \
	-lsmumps -ldmumps -lcmumps -lzmumps -lmumps_common -lmpiseq -lpord \
	-ltet \
	-larpack -llapack -lopenblas -lgfortran -lquadmath -lquadmath \
	$(EXTRA)
SRCS=$(wildcard  $(SRCDIR)/*.cpp)
OBJS=$(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SRCS))
#OBJS = $(addprefix $(OBJDIR)/, main.o model.o project.o solver.o)


#CFLAGS = -std=gnu++98 -m64 -fopenmp -static -s -I./ -I./ext/tetgen -I./ext/mumps/include -I./ext/arma/include -I./ext/metis -I./ext/gmm -DTETLIBRARY
#LFLAGS = -std=gnu++98 -m64 -fopenmp -static -s -L./ext -lsmumps -ldmumps -lcmumps -lzmumps -lmumps_common -lmpiseq -lpord -lmetis -ltet -larpack -llapack -lopenblas -lgfortran -lquadmath -lpsapi -liphlpapi

#OBJS = $(addprefix $(OBJDIR)/, AssElStat.o AssLin.o AssLinDD.o AssLinSchur.o AssNL.o BC.o Coupl.o DoF.o Eigen.o EleMat.o EqSys.o Field.o HFSS.o Main.o Mesh.o Mtrl.o MUMPS.o Option.o Project.o Quad.o Rad.o Shape.o TetGen.o FE.rc.o)

# all: $(OBJS)
# 	$(CC) -o $(BINDIR)/fes $(OBJS) $(LFLAGS)

# $(OBJDIR)/%.o : $(SRCDIR)/%.cpp
# 	$(CC) $(CFLAGS) -c  $< -o $@

# $(OBJDIR)/%.rc.o : $(SRCDIR)/%.rc
# 	$(RES) $< -o $@

# .PHONY: clean
# clean:
# 	$(RM) $(call FixPath,$(OBJDIR)/*.o)

all: $(BINDIR) $(OBJDIR) $(BIN)

$(BIN): $(OBJS)
	$(CC) -o $(BINDIR)/$@ $^ $(LFLAGS)

$(BINDIR):
	if [ ! -d "$(BINDIR)" ]; then mkdir $(BINDIR); fi

$(OBJDIR):
	if [ ! -d "./obj" ]; then mkdir ./obj; fi
	if [ ! -d "$(OBJDIR)" ]; then mkdir $(OBJDIR); fi

$(OBJDIR)/%.o : $(SRCDIR)/%.cpp
	$(CC) $(CFLAGS) -c  $< -o $@

.PHONY: test
test:
	wine $(BINDIR)/$(BIN) $(ARGS)

.PHONY: clean
clean:
	rm -f $(OBJDIR)/*.o $(BINDIR)/$(BIN)

